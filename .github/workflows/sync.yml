name: Sync FTP to Local and Commit

on:
  schedule:
    - cron: "0 8 * * *"
  push:
    paths:
      - .github/workflows/sync.yml
      - src/*.*
  workflow_dispatch:
    inputs:
      change_id:
        description: "The change ID to be used for the commit message"
        required: false
        default: ""

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  sync-ftp:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache top-level node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-root-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-root-node-

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: timeline/node_modules
          key: ${{ runner.os }}-timeline-node-${{ hashFiles('timeline/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-timeline-node-

      - name: Cache Next.js build cache
        uses: actions/cache@v4
        with:
          path: timeline/.next/cache
          key: ${{ runner.os }}-timeline-nextjs-${{ hashFiles('timeline/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-timeline-nextjs-

      - name: Check change_id
        id: check_change_id
        env:
          INPUT_CHANGE_ID: ${{ inputs.change_id }}
        run: |
          # Read current change_id from file, default to empty if file doesn't exist
          CURRENT_CHANGE_ID=$(cat www/change_id.txt 2>/dev/null || echo "")
          # Trim whitespace
          CURRENT_CHANGE_ID=$(echo "$CURRENT_CHANGE_ID" | xargs)
          INPUT_CHANGE_ID=$(echo "$INPUT_CHANGE_ID" | xargs)
          # Compare and set output
          if [[ -n "$INPUT_CHANGE_ID" && "$INPUT_CHANGE_ID" == "$CURRENT_CHANGE_ID" ]]; then
            echo "Change IDs match. Skipping all steps."
            echo "skip_steps=true" >> "$GITHUB_OUTPUT"
          else
            echo "Change IDs do not match or input is empty. Proceeding."
            echo "skip_steps=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install dependencies
        if: steps.check_change_id.outputs.skip_steps != 'true'
        run: |
          npm install

      - name: Descrypt vault files
        if: steps.check_change_id.outputs.skip_steps != 'true'
        run: |
          node src/vault.mjs decrypt
        env:
          VAULT_SECRET: ${{secrets.VAULT_SECRET}}

      # - name: Keep site alive
      #   if: steps.check_change_id.outputs.skip_steps != 'true'
      #   continue-on-error: true
      #   run: |
      #     node src/bytehost.mjs

      - name: "Fetch content from ftp server"
        if: steps.check_change_id.outputs.skip_steps != 'true'
        uses: "samuraitruong/use-ftp-action@main"
        with:
          FTP_USER: ${{ secrets.FTP_USER }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_ROOT_FOLDER: htdocs
          LOCAL_FOLDER: "wwwftp"
          FTP_HOST: ftp://ftpupload.net
          SYNC_MODE: download

      - name: Update HTML content
        if: steps.check_change_id.outputs.skip_steps != 'true'
        run: |
          cp -r wwwftp/* www
          docker compose up -d
          sleep 2
          sudo chown -R $(whoami) ./www
          node src/update-html.mjs
          docker compose down


      - name: run Sync.mjs
        if: steps.check_change_id.outputs.skip_steps != 'true'
        run: |
          sudo chown -R $(whoami) ./www
          node src/sync.mjs
          node src/prepare-data.mjs

      - name: Build Timeline App
        if: steps.check_change_id.outputs.skip_steps != 'true'
        run: |
          cd timeline
          npm install
          npm run build
          cd ..
        env:
          NEXT_PUBLIC_BASE_PATH: "/timeline"
          NEXT_PUBLIC_EXPORT_STATIC: "true"
          NEXT_PUBLIC_APP_URL: ""

      - name: Copy Timeline Output
        if: steps.check_change_id.outputs.skip_steps != 'true'
        run: |
          rm -rf www/timeline
          cp -r timeline/out www/timeline

      - name: Replace PHP links with HTML links
        if: steps.check_change_id.outputs.skip_steps != 'true'
        run: |
          DIRECTORY="./www"
          find "$DIRECTORY" -type f -name "*.html" -print0 | while IFS= read -r -d '' file; do
            sed -i 's/\.php/.html/g' "$file"
          done
          find "$DIRECTORY" -type f -name "*.js" -print0 | while IFS= read -r -d '' file; do
            sed -i 's/\.php/.html/g' "$file"
          done

      - name: Commit changes
        if: steps.check_change_id.outputs.skip_steps != 'true'
        id: commit
        run: |
          sudo chown -R $(whoami) ./wwwftp
          rm -rf wwwftp
          find "www" -type f -name '*~*' -exec rm -f {} +
          rm www/.html || true
          echo "$INPUT_CHANGE_ID" > www/change_id.txt
          git status
          if [[ -n $(git status --porcelain) ]]; then
            git config --global user.name "FTP Sync"
            git config --global user.email "ftp@hbcc.com"
            git add .
            git commit -am "Sync FTP changes"
            git push
            echo "CHANGED=true" >> "$GITHUB_OUTPUT"
          else
            echo "There are no changes to commit."
          fi
        env:
          INPUT_CHANGE_ID: ${{ inputs.change_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Pages
        if: steps.check_change_id.outputs.skip_steps != 'true' && steps.commit.outputs.CHANGED == 'true'
        uses: actions/configure-pages@v4

      - name: Upload artifact
        if: steps.check_change_id.outputs.skip_steps != 'true' && steps.commit.outputs.CHANGED == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./www"

      - name: Deploy to GitHub Pages
        if: steps.check_change_id.outputs.skip_steps != 'true' && steps.commit.outputs.CHANGED == 'true'
        id: deployment
        uses: actions/deploy-pages@v4
